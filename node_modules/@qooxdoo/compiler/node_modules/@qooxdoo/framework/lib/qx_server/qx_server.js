(function(){ 

  var path = require("path");
  
  if (typeof window === "undefined") 
    window = this;
  window.dispatchEvent = function() {};

  if (!window.navigator) window.navigator = {};
  if (!window.navigator.userAgent) {
    window.navigator.userAgent = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_4; de-de) AppleWebKit/533.17.8 (KHTML, like Gecko) Version/5.0.1 Safari/533.17.8";
  }
  if (!window.navigator.product) window.navigator.product = "";
  if (!window.navigator.cpuClass) window.navigator.cpuClass = "";

  // Node suppresses output to the "real" console when calling console.debug, it's only shown
  //  in the debugger 
  console.debug = function() {
    var args = [].slice.apply(arguments);
    console.log.apply(this, args);
  };
  
  var JSDOM = null;
  try {
    JSDOM = require("jsdom").JSDOM;
  } catch(ex) {
    // Nothing
  }
  if (JSDOM) {
    var dom = new JSDOM(`<!DOCTYPE html><html><head></head><body></body></html>`);
    if (!window)
      window = dom.window;
    else {
      window.document = dom.window.document;
    }
  } else {
    window.document = document = {
        readyState: "ready",
        createEvent: function() {
          return {
            initCustomEvent: function() {}
          };
        },
        createElement: function () {
          return {}
        },
        addListener: function() {},
        removeListener: function() {},
        documentElement: {
          style: {}
        }
    };
  }

  if (!this.qxloadPrefixUrl)
    qxloadPrefixUrl = "";

  if (!window.qx) 
    window.qx = {};
  
  if (!qx.$$appRoot) {
    qx.$$appRoot = __dirname + path.sep;
  }

  if (!window.qxvariants) 
    qxvariants = {};

  qx.$$start = new Date();

  if (!qx.$$environment) {
    qx.$$environment = {};
  }
  var envinfo = {
  "qx.application": "qx.application.Native",
  "qx.revision": "",
  "qx.theme": null,
  "qx.version": "6.0.0-beta-20200401-1413",
  "qx.libraryInfoMap": {
    "qx": {
      "name": "qooxdoo framework",
      "summary": "The qooxdoo framework library",
      "description": "This library contains the qooxdoo Javascript framework classes for website, mobile, desktop and server.",
      "keywords": [
        "qooxdoo",
        "framework",
        "widget",
        "cross-browser",
        "ajax"
      ],
      "homepage": "http://qooxdoo.org",
      "license": "MIT",
      "authors": [
        {
          "name": "Alexander Steitz (asteitz)",
          "email": "alexander DOT steitz AT 1und1 DOT de"
        },
        {
          "name": "Christopher Zündorf (czuendorf)",
          "email": "christopher DOT zuendorf AT 1und1 DOT de"
        },
        {
          "name": "Daniel Wagner (danielwagner)",
          "email": "daniel DOT wagner AT 1und1 DOT de"
        },
        {
          "name": "Derrell Lipman (derrell)",
          "email": "derrell DOT lipman AT unwireduniverse DOT com"
        },
        {
          "name": "Andreas Ecker (ecker)",
          "email": "andreas DOT ecker AT 1und1 DOT de"
        },
        {
          "name": "Christian Hagendorn (Hagendorn)",
          "email": "christian DOT hagendorn AT 1und1 DOT de"
        },
        {
          "name": "Mustafa Sak (msak)",
          "email": "Mustafa DOT Sak AT 1und1 DOT de"
        },
        {
          "name": "Thomas Herchenröder (thron7)",
          "email": "thron7 AT users DOT sourceforge DOT net"
        },
        {
          "name": "Tino Butz (tjbutz)",
          "email": "tino DOT butz AT 1und1 DOT de"
        },
        {
          "name": "Tristan Koch (trkoch)",
          "email": "tristan DOT koch AT 1und1 DOT de"
        },
        {
          "name": "Martin Wittemann (wittemann)",
          "email": "martin DOT wittemann AT 1und1 DOT de"
        }
      ],
      "version": "6.0.0-beta-20200401-1413",
      "qooxdoo-versions": [
        "6.0.0-beta-20200401-1413"
      ],
      "sourceViewUri": "https://github.com/qooxdoo/qooxdoo/blob//framework/source/class/#L"
    }
  },
  "true": true,
  "qx.allowUrlSettings": false,
  "qx.allowUrlVariants": false,
  "qx.debug.property.level": 0,
  "qx.debug": false,
  "qx.debug.ui.queue": true,
  "qx.debug.touchpad.detection": false,
  "qx.aspects": false,
  "qx.dynlocale": true,
  "qx.dyntheme": true,
  "qx.blankpage": "qx/static/blank.html",
  "qx.debug.databinding": false,
  "qx.debug.dispose": false,
  "qx.optimization.basecalls": false,
  "qx.optimization.comments": false,
  "qx.optimization.privates": false,
  "qx.optimization.strings": false,
  "qx.optimization.variables": false,
  "qx.optimization.variants": false,
  "module.databinding": true,
  "module.logger": true,
  "module.property": true,
  "module.events": true,
  "qx.nativeScrollBars": false,
  "qx.automaticMemoryManagement": true,
  "qx.promise": true,
  "qx.promise.warnings": true,
  "qx.promise.longStackTraces": true,
  "qx.compilerVersion": "1.0.0-beta.20200326-1746",
  "qx.headless": true
};
  for (var k in envinfo) {
    qx.$$environment[k] = envinfo[k];
  }

  if (!qx.$$libraries) {
    qx.$$libraries = {};
  }
  var libinfo = {
  "__out__": {
    "sourceUri": qx.$$appRoot + ""
  },
  "qx": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.logpane": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.versionlabel": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.demobrowser": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.apiviewer": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.widgetbrowser": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.formdemo": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.mobileshowcase": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.datademo": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.playground": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  },
  "qxl.testtapper": {
    "sourceUri": qx.$$appRoot + ".",
    "resourceUri": qx.$$appRoot + "../resource"
  }
};
  for (var k in libinfo) { 
    qx.$$libraries[k] = libinfo[k]; 
  }

  var isDebug = qx.$$environment["qx.debugLoader"];
  var log = isDebug ? console.log : function() { };
  var loaderMethod = qx.$$environment["qx.ooLoader"] ? this[qx.$$environment["qx.ooLoader"]] : require;
  if (typeof loaderMethod !== "function")
    throw new Error("Cannot initialise Qooxdoo application - no URI loader method detected");

  qx.$$resources = {};
  qx.$$translations = {
  "C": null,
  "en": null
};
  qx.$$locales = {
  "C": null,
  "en": null
};
  qx.$$packageData = {};
  qx.$$g = {}
  qx.$$createdAt = function(obj, filename, lineNumber, column) {
    if (obj !== undefined && obj !== null && typeof Object.$$createdAt === undefined) {
      Object.defineProperty(obj, "$$createdAt", {
        value: {
          filename: filename,
          lineNumber: lineNumber,
          column: column
        },
        enumerable: false,
        configurable: false,
        writable: false
      });
    }
    return obj;
  };

  qx.$$loader = {
      parts : {
  "boot": [
    "0"
  ]
},
      packages : {
  "0": {
    "uris": [
      "__out__:part-0.js"
    ]
  }
},
      boot : "boot",
      closureParts : {},
      delayDefer: true,
      transpiledPath: qx.$$appRoot + "../transpiled",

      decodeUris : function(compressedUris, pathName) {
        if (!pathName)
          pathName = this.transpiledPath;
        var libs = qx.$$libraries;
        var uris = [];
        for (var i = 0; i < compressedUris.length; i++) {
          var uri = compressedUris[i].split(":");
          var euri;
          if (uri.length == 2 && uri[0] in libs) {
            if (uri[0] == "__out__")
              euri = "./" + uri[1];
            else
              euri = pathName + "/" + uri[1];
          } else if (uri[0] == "__external__") {
            continue;
          } else {
            euri = compressedUris[i];
          }
          
          uris.push(qxloadPrefixUrl + euri);
        }
        return uris;
      },

      init : function() {
        var l = qx.$$loader;

        var bootPackageHash=l.parts[l.boot][0];
        this.loadScriptList(l.decodeUris(l.packages[l.parts[l.boot][0]].uris));
        l.importPackageData(qx.$$packageData[bootPackageHash] || {});
        qx.$$domReady = true;
        l.signalStartup();
      },

      loadScriptList: function(list) {
        list.forEach(function(uri) {
          var f = loaderMethod(uri);
          if (typeof f === "function") {
            window[f.name] = f;
          }
        });
      },

      signalStartup : function() {
        qx.Bootstrap.executePendingDefers();
        qx.$$loader.delayDefer = false;
        qx.$$loader.scriptLoaded = true;
        qx.core.BaseInit.ready();
        qx.$$loader.applicationHandlerReady = true;
      },

      importPackageData : function(dataMap, callback) {
        if (dataMap["resources"]) {
          var resMap = dataMap["resources"];
          for ( var k in resMap)
            qx.$$resources[k] = resMap[k];
        }
        if (dataMap["locales"]) {
          var locMap = dataMap["locales"];
          var qxlocs = qx.$$locales;
          for ( var lang in locMap) {
            if (!qxlocs[lang])
              qxlocs[lang] = locMap[lang];
            else
              for (var k in locMap[lang])
                qxlocs[lang][k] = locMap[lang][k];
          }
        }
        if (dataMap["translations"]) {
          var trMap = dataMap["translations"];
          var qxtrans = qx.$$translations;
          for ( var lang in trMap) {
            if (!qxtrans[lang])
              qxtrans[lang] = trMap[lang];
            else
              for ( var k in trMap[lang])
                qxtrans[lang][k] = trMap[lang][k];
          }
        }
        if (callback) {
          callback(dataMap);
        }
      }
  };

})();




qx.$$loader.init();
if (typeof exports != "undefined") {
  for (var key in qx) {
    exports[key] = qx[key];
  }
}


