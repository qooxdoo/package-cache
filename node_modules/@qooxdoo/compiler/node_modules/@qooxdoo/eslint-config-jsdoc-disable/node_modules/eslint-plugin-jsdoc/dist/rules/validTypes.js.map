{"version":3,"sources":["../../src/rules/validTypes.js"],"names":["asExpression","jsdoc","report","utils","context","options","allowEmptyNamepaths","checkSeesForNamepaths","tags","forEach","tag","validTypeParsing","type","tagName","err","error","includes","endChar","slice","memberofError","startChar","charAt","name","thisNamepath","description","replace","test","thatNamepath","isNamepathTag","passesEmptyNamepathCheck","isTagWithType","iterateAllJsdocs","meta","schema","additionalProperies","properties","default"],"mappings":"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","sourcesContent":["import {parse} from 'jsdoctypeparser';\nimport iterateJsdoc from '../iterateJsdoc';\nimport warnRemovedSettings from '../warnRemovedSettings';\n\nconst asExpression = /as\\s+/;\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  utils,\n  context\n}) => {\n  warnRemovedSettings(context, 'valid-types');\n\n  const {\n    allowEmptyNamepaths = true,\n    checkSeesForNamepaths = false\n  } = context.options[0] || {};\n\n  if (!jsdoc.tags) {\n    return;\n  }\n  jsdoc.tags.forEach((tag) => {\n    const validTypeParsing = function (type, tagName) {\n      try {\n        parse(type);\n      } catch (err) {\n        let error = err;\n\n        if (tagName) {\n          if (['memberof', 'memberof!'].includes(tagName)) {\n            const endChar = type.slice(-1);\n            if (['#', '.', '~'].includes(endChar)) {\n              try {\n                parse(type.slice(0, -1));\n                error = {};\n              } catch (memberofError) {\n                // Use the original error for including the whole type\n              }\n            }\n          } else if (tagName === 'borrows') {\n            const startChar = type.charAt();\n            if (['#', '.', '~'].includes(startChar)) {\n              try {\n                parse(type.slice(1));\n                error = {};\n              } catch (memberofError) {\n                // Use the original error for including the whole type\n              }\n            }\n          }\n        }\n\n        if (error.name === 'SyntaxError') {\n          report(`Syntax error in type: ${type}`, null, tag);\n\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    if (tag.tag === 'borrows') {\n      const thisNamepath = tag.description.replace(asExpression, '');\n\n      if (!asExpression.test(tag.description) || !thisNamepath) {\n        report(`@borrows must have an \"as\" expression. Found \"${tag.description}\"`, null, tag);\n\n        return;\n      }\n\n      if (validTypeParsing(thisNamepath, 'borrows')) {\n        const thatNamepath = tag.name;\n\n        validTypeParsing(thatNamepath);\n      }\n    } else if (utils.isNamepathTag(tag.tag, checkSeesForNamepaths)) {\n      if (utils.passesEmptyNamepathCheck(tag, allowEmptyNamepaths)) {\n        return;\n      }\n      validTypeParsing(tag.name, tag.tag);\n    } else if (tag.type && utils.isTagWithType(tag.tag)) {\n      validTypeParsing(tag.type);\n    }\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    schema: [\n      {\n        additionalProperies: false,\n        properties: {\n          allowEmptyNamepaths: {\n            default: true,\n            type: 'boolean'\n          },\n          checkSeesForNamepaths: {\n            default: false,\n            type: 'boolean'\n          }\n        },\n        type: 'object'\n      }\n    ],\n    type: 'suggestion'\n  }\n});\n"],"file":"validTypes.js"}