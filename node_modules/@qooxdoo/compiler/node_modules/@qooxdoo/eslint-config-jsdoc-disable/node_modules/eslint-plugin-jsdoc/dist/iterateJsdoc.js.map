{"version":3,"sources":["../src/iterateJsdoc.js"],"names":["parseComment","commentNode","indent","trim","value","parsers","commentParser","PARSERS","parse_tag","parse_type","str","data","includes","tag","parse_name","parse_description","errors","length","result","match","description","undefined","source","getUtils","node","jsdoc","jsdocNode","tagNamePreference","overrideReplacesDocs","implementsReplacesDocs","augmentsExtendsReplacesDocs","maxLines","minLines","report","context","ancestors","getAncestors","sourceCode","getSourceCode","utils","stringify","tagBlock","jsdocUtils","getIndent","slice","reportJSDoc","msg","handler","fixer","replacement","replaceText","getFunctionParameterNames","isConstructor","parent","kind","isSetter","getJsdocParameterNamesDeep","param","getPreferredTagName","tagName","getJsdocParameterNames","skipReportingBlockedTag","allowObjectReturn","defaultMessage","ret","isObject","hasTag","blocked","message","getTags","isValidTag","name","definedTags","hasATag","avoidDocs","classHasTag","exemptedBy","_","get","getPresentTags","isNamepathDefiningTag","isNamepathTag","checkSeesForNamepaths","isTagWithType","passesEmptyNamepathCheck","allowEmptyNamepaths","isPotentiallyEmptyNamepathTag","hasDefinedTypeReturnTag","hasReturnValue","isAsync","async","filterTags","item","tagList","filter","tags","getTagsByType","getClassNode","greatGrandParent","getAncestor","greatGrandParentValue","getFirstToken","getClassJsdoc","classNode","classJsdocNode","repeat","loc","start","column","classJsdoc","forEachPreferredTag","arrayHandler","targetTagName","matchingJsdocTags","forEach","matchingJsdocTag","reportSettings","line","getSettings","settings","ignorePrivate","Boolean","Number","preferredTypes","makeReport","fix","jsdocLoc","lineNumber","end","colNumber","iterateAllJsdocs","iterator","ruleConfig","create","comments","getAllComments","comment","getText","startsWith","noTrim","meta","iterateJsdoc","metaType","TypeError","checkJsdoc","contextDefaults","contexts","enforcedContexts","getContextObject","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression"],"mappings":"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","sourcesContent":["// eslint-disable-next-line import/no-named-default\nimport {default as commentParser, stringify as commentStringify} from 'comment-parser';\nimport _ from 'lodash';\nimport jsdocUtils from './jsdocUtils';\nimport getJSDocComment from './eslint/getJSDocComment';\n\n/**\n *\n * @param {object} commentNode\n * @param {string} indent Whitespace\n * @returns {object}\n */\nconst parseComment = (commentNode, indent, trim = true) => {\n  // Preserve JSDoc block start/end indentation.\n  return commentParser(`${indent}/*${commentNode.value}${indent}*/`, {\n    // @see https://github.com/yavorskiy/comment-parser/issues/21\n    parsers: [\n      commentParser.PARSERS.parse_tag,\n      commentParser.PARSERS.parse_type,\n      (str, data) => {\n        if (['example', 'return', 'returns', 'throws', 'exception'].includes(data.tag)) {\n          return null;\n        }\n\n        return commentParser.PARSERS.parse_name(str, data);\n      },\n      trim ?\n        commentParser.PARSERS.parse_description :\n\n        // parse_description\n        (str, data) => {\n          // Only expected throw in previous step is if bad name (i.e.,\n          //   missing end bracket on optional name), but `@example`\n          //  skips name parsing\n          /* istanbul ignore next */\n          if (data.errors && data.errors.length) {\n            return null;\n          }\n\n          // Tweak original regex to capture only single optional space\n          const result = str.match(/^\\s?((.|\\s)+)?/);\n\n          // Always has at least whitespace due to `indent` we've added\n          /* istanbul ignore next */\n          if (result) {\n            return {\n              data: {\n                description: result[1] === undefined ? '' : result[1]\n              },\n              source: result[0]\n            };\n          }\n\n          // Always has at least whitespace due to `indent` we've added\n          /* istanbul ignore next */\n          return null;\n        }\n    ],\n    trim\n  })[0] || {};\n};\n\nconst getUtils = (\n  node,\n  jsdoc,\n  jsdocNode,\n  {\n    tagNamePreference,\n    overrideReplacesDocs,\n    implementsReplacesDocs,\n    augmentsExtendsReplacesDocs,\n    maxLines,\n    minLines\n  },\n  report,\n  context\n) => {\n  const ancestors = context.getAncestors();\n  const sourceCode = context.getSourceCode();\n\n  const utils = {};\n\n  utils.stringify = (tagBlock) => {\n    const indent = jsdocUtils.getIndent(sourceCode);\n\n    return commentStringify([tagBlock], {indent}).slice(indent.length - 1);\n  };\n\n  utils.reportJSDoc = (msg, tag, handler) => {\n    report(msg, (fixer) => {\n      handler();\n      const replacement = utils.stringify(jsdoc);\n\n      return fixer.replaceText(jsdocNode, replacement);\n    }, tag);\n  };\n\n  utils.getFunctionParameterNames = () => {\n    return jsdocUtils.getFunctionParameterNames(node);\n  };\n\n  utils.isConstructor = () => {\n    return node.parent && node.parent.kind === 'constructor';\n  };\n\n  utils.isSetter = () => {\n    return node.parent.kind === 'set';\n  };\n\n  utils.getJsdocParameterNamesDeep = () => {\n    const param = utils.getPreferredTagName({tagName: 'param'});\n    if (!param) {\n      return false;\n    }\n\n    return jsdocUtils.getJsdocParameterNamesDeep(jsdoc, param);\n  };\n\n  utils.getJsdocParameterNames = () => {\n    const param = utils.getPreferredTagName({tagName: 'param'});\n    if (!param) {\n      return false;\n    }\n\n    return jsdocUtils.getJsdocParameterNames(jsdoc, param);\n  };\n\n  utils.getPreferredTagName = ({tagName, skipReportingBlockedTag = false, allowObjectReturn = false, defaultMessage = `Unexpected tag \\`@${tagName}\\``}) => {\n    const ret = jsdocUtils.getPreferredTagName(tagName, tagNamePreference);\n    const isObject = ret && typeof ret === 'object';\n    if (utils.hasTag(tagName) && (ret === false || isObject && !ret.replacement)) {\n      if (skipReportingBlockedTag) {\n        return {\n          blocked: true,\n          tagName\n        };\n      }\n      const message = isObject && ret.message || defaultMessage;\n      report(message, null, utils.getTags(tagName)[0]);\n\n      return false;\n    }\n\n    return isObject && !allowObjectReturn ? ret.replacement : ret;\n  };\n\n  utils.isValidTag = (name, definedTags) => {\n    return jsdocUtils.isValidTag(name, definedTags);\n  };\n\n  utils.hasATag = (name) => {\n    return jsdocUtils.hasATag(jsdoc, name);\n  };\n\n  utils.hasTag = (name) => {\n    return jsdocUtils.hasTag(jsdoc, name);\n  };\n\n  utils.avoidDocs = () => {\n    if (\n      overrideReplacesDocs !== false &&\n        (utils.hasTag('override') || utils.classHasTag('override')) ||\n      implementsReplacesDocs !== false &&\n        (utils.hasTag('implements') || utils.classHasTag('implements')) ||\n\n      // inheritdoc implies that all documentation is inherited; see https://jsdoc.app/tags-inheritdoc.html\n      utils.hasTag('inheritdoc') ||\n\n      augmentsExtendsReplacesDocs &&\n        (utils.hasATag(['augments', 'extends']) ||\n          utils.classHasTag('augments') ||\n            utils.classHasTag('extends'))) {\n      return true;\n    }\n\n    const exemptedBy = _.get(context, 'options[0].exemptedBy');\n    if (exemptedBy && exemptedBy.length && utils.getPresentTags(exemptedBy).length) {\n      return true;\n    }\n\n    return false;\n  };\n\n  utils.isNamepathDefiningTag = (tagName) => {\n    return jsdocUtils.isNamepathDefiningTag(tagName);\n  };\n  utils.isNamepathTag = (tagName, checkSeesForNamepaths) => {\n    return jsdocUtils.isNamepathTag(tagName, checkSeesForNamepaths);\n  };\n\n  utils.isTagWithType = (tagName) => {\n    return jsdocUtils.isTagWithType(tagName);\n  };\n\n  utils.passesEmptyNamepathCheck = (tag, allowEmptyNamepaths) => {\n    return !tag.name && allowEmptyNamepaths &&\n      jsdocUtils.isPotentiallyEmptyNamepathTag(tag.tag);\n  };\n\n  utils.hasDefinedTypeReturnTag = (tag) => {\n    return jsdocUtils.hasDefinedTypeReturnTag(tag);\n  };\n\n  utils.hasReturnValue = () => {\n    return jsdocUtils.hasReturnValue(node);\n  };\n\n  utils.isAsync = () => {\n    return node.async;\n  };\n\n  utils.getTags = (tagName) => {\n    return utils.filterTags((item) => {\n      return item.tag === tagName;\n    });\n  };\n\n  utils.getPresentTags = (tagList) => {\n    return utils.filterTags((tag) => {\n      return tagList.includes(tag.tag);\n    });\n  };\n\n  utils.filterTags = (filter) => {\n    return jsdocUtils.filterTags(jsdoc.tags, filter);\n  };\n\n  utils.getTagsByType = (tags) => {\n    return jsdocUtils.getTagsByType(tags, tagNamePreference);\n  };\n\n  utils.getClassNode = () => {\n    // Ancestors missing in `Program` comment iteration\n    const greatGrandParent = ancestors.length ?\n      ancestors.slice(-3)[0] :\n      jsdocUtils.getAncestor(sourceCode, jsdocNode, 3);\n\n    const greatGrandParentValue = greatGrandParent && sourceCode.getFirstToken(greatGrandParent).value;\n\n    if (greatGrandParentValue === 'class') {\n      return greatGrandParent;\n    }\n\n    return false;\n  };\n\n  utils.getClassJsdoc = () => {\n    const classNode = utils.getClassNode();\n    const classJsdocNode = getJSDocComment(sourceCode, classNode, {\n      maxLines,\n      minLines\n    });\n\n    if (classJsdocNode) {\n      const indent = ' '.repeat(classJsdocNode.loc.start.column);\n\n      return parseComment(classJsdocNode, indent);\n    }\n\n    return null;\n  };\n\n  utils.classHasTag = (tagName) => {\n    const classJsdoc = utils.getClassJsdoc();\n\n    return classJsdoc && jsdocUtils.hasTag(classJsdoc, tagName);\n  };\n\n  utils.forEachPreferredTag = (tagName, arrayHandler, skipReportingBlockedTag = false) => {\n    const targetTagName = utils.getPreferredTagName({\n      skipReportingBlockedTag,\n      tagName\n    });\n    if (!targetTagName ||\n      skipReportingBlockedTag && targetTagName && typeof targetTagName === 'object'\n    ) {\n      return;\n    }\n    const matchingJsdocTags = _.filter(jsdoc.tags || [], {\n      tag: targetTagName\n    });\n\n    matchingJsdocTags.forEach((matchingJsdocTag) => {\n      arrayHandler(matchingJsdocTag, targetTagName);\n    });\n  };\n\n  utils.reportSettings = (message) => {\n    context.report({\n      loc: {\n        start: {\n          column: 1,\n          line: 1\n        }\n      },\n      message\n    });\n  };\n\n  return utils;\n};\n\nconst getSettings = (context) => {\n  const settings = {};\n\n  // All rules\n  settings.ignorePrivate = Boolean(_.get(context, 'settings.jsdoc.ignorePrivate'));\n  settings.minLines = Number(_.get(context, 'settings.jsdoc.minLines', 0));\n  settings.maxLines = Number(_.get(context, 'settings.jsdoc.maxLines', 1));\n\n  // `check-tag-names` and many returns/param rules\n  settings.tagNamePreference = _.get(context, 'settings.jsdoc.tagNamePreference') || {};\n\n  // `check-types` and `no-undefined-types`\n  settings.preferredTypes = _.get(context, 'settings.jsdoc.preferredTypes') || {};\n\n  // `require-param`, `require-description`, `require-example`, `require-returns`\n  settings.overrideReplacesDocs = _.get(context, 'settings.jsdoc.overrideReplacesDocs');\n  settings.implementsReplacesDocs = _.get(context, 'settings.jsdoc.implementsReplacesDocs');\n  settings.augmentsExtendsReplacesDocs = _.get(context, 'settings.jsdoc.augmentsExtendsReplacesDocs');\n\n  return settings;\n};\n\n/**\n * Create the report function\n *\n * @param {object} context\n * @param {object} commentNode\n */\nconst makeReport = (context, commentNode) => {\n  const report = (message, fix = null, jsdocLoc = null, data = null) => {\n    let loc;\n\n    if (jsdocLoc) {\n      const lineNumber = commentNode.loc.start.line + jsdocLoc.line;\n\n      loc = {\n        end: {line: lineNumber},\n        start: {line: lineNumber}\n      };\n      if (jsdocLoc.column) {\n        const colNumber = commentNode.loc.start.column + jsdocLoc.column;\n\n        loc.end.column = colNumber;\n        loc.start.column = colNumber;\n      }\n    }\n\n    context.report({\n      data,\n      fix,\n      loc,\n      message,\n      node: commentNode\n    });\n  };\n\n  return report;\n};\n\n/**\n * @typedef {ReturnType<typeof getUtils>} Utils\n * @typedef {ReturnType<typeof getSettings>} Settings\n * @typedef {(\n *   arg: {\n *     context: Object,\n *     sourceCode: Object,\n *     indent: string,\n *     jsdoc: Object,\n *     jsdocNode: Object,\n *     node: Object | null,\n *     report: ReturnType<typeof makeReport>,\n *     settings: Settings,\n *     utils: Utils,\n *   }\n * ) => any } JsdocVisitor\n */\n\n/**\n * Create an eslint rule that iterates over all JSDocs, regardless of whether\n * they are attached to a function-like node.\n *\n * @param {JsdocVisitor} iterator\n * @param {{meta: any}} ruleConfig\n */\nconst iterateAllJsdocs = (iterator, ruleConfig) => {\n  return {\n    create (context) {\n      return {\n        'Program' () {\n          const sourceCode = context.getSourceCode();\n          const comments = sourceCode.getAllComments();\n\n          comments.forEach((comment) => {\n            if (!sourceCode.getText(comment).startsWith('/**')) {\n              return;\n            }\n\n            const indent = ' '.repeat(comment.loc.start.column);\n            const jsdoc = parseComment(comment, indent, !ruleConfig.noTrim);\n            const settings = getSettings(context);\n            const report = makeReport(context, comment);\n            const jsdocNode = comment;\n\n            iterator({\n              context,\n              indent,\n              jsdoc,\n              jsdocNode,\n              node: null,\n              report,\n              settings,\n              sourceCode,\n              utils: getUtils(null, jsdoc, jsdocNode, settings, report, context)\n            });\n          });\n        }\n      };\n    },\n    meta: ruleConfig.meta\n  };\n};\n\nexport {\n  getSettings,\n  parseComment\n};\n\n/**\n * @param {JsdocVisitor} iterator\n * @param {{\n *   meta: any,\n *   contextDefaults?: true | string[],\n *   iterateAllJsdocs?: true,\n * }} ruleConfig\n */\nexport default function iterateJsdoc (iterator, ruleConfig) {\n  const metaType = _.get(ruleConfig, 'meta.type');\n  if (!metaType || !['problem', 'suggestion', 'layout'].includes(metaType)) {\n    throw new TypeError('Rule must include `meta.type` option (with value \"problem\", \"suggestion\", or \"layout\")');\n  }\n  if (typeof iterator !== 'function') {\n    throw new TypeError('The iterator argument must be a function.');\n  }\n\n  if (ruleConfig.iterateAllJsdocs) {\n    return iterateAllJsdocs(iterator, {\n      meta: ruleConfig.meta,\n      noTrim: ruleConfig.noTrim\n    });\n  }\n\n  return {\n    /**\n     * The entrypoint for the JSDoc rule.\n     *\n     * @param {*} context\n     *   a reference to the context which hold all important information\n     *   like settings and the sourcecode to check.\n     * @returns {object}\n     *   a list with parser callback function.\n     */\n    create (context) {\n      const sourceCode = context.getSourceCode();\n\n      const settings = getSettings(context);\n\n      const checkJsdoc = (node) => {\n        const jsdocNode = getJSDocComment(sourceCode, node, settings);\n\n        if (!jsdocNode) {\n          return;\n        }\n\n        const indent = ' '.repeat(jsdocNode.loc.start.column);\n\n        const jsdoc = parseComment(jsdocNode, indent);\n\n        const report = makeReport(context, jsdocNode);\n\n        const utils = getUtils(\n          node,\n          jsdoc,\n          jsdocNode,\n          settings,\n          report,\n          context\n        );\n\n        if (\n          settings.ignorePrivate &&\n          utils.hasTag('private')\n        ) {\n          return;\n        }\n\n        iterator({\n          context,\n          indent,\n          jsdoc,\n          jsdocNode,\n          node,\n          report,\n          settings,\n          sourceCode,\n          utils\n        });\n      };\n\n      if (ruleConfig.contextDefaults) {\n        const contexts = jsdocUtils.enforcedContexts(context, ruleConfig.contextDefaults);\n\n        return jsdocUtils.getContextObject(contexts, checkJsdoc);\n      }\n\n      return {\n        ArrowFunctionExpression: checkJsdoc,\n        FunctionDeclaration: checkJsdoc,\n        FunctionExpression: checkJsdoc\n      };\n    },\n    meta: ruleConfig.meta\n  };\n}\n"],"file":"iterateJsdoc.js"}